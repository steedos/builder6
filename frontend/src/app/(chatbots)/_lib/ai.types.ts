/**
 * @deprecated use AI SDK 3.1 CoreTool / ToolResult instead
 */
 export interface FunctionCall {
    /**
     * The arguments to call the function with, as generated by the model in JSON
     * format. Note that the model does not always generate valid JSON, and may
     * hallucinate parameters not defined by your function schema. Validate the
     * arguments in your code before calling your function.
     */
    arguments?: string;
  
    /**
     * The name of the function to call.
     */
    name?: string;
  }
  
  /**
   * @deprecated use AI SDK 3.1 CoreTool / ToolResult instead
   *
   * The tool calls generated by the model, such as function calls.
   */
  export interface ToolCall {
    // The ID of the tool call.
    id: string;
  
    // The type of the tool. Currently, only `function` is supported.
    type: string;
  
    // The function that the model called.
    function: {
      // The name of the function.
      name: string;
  
      // The arguments to call the function with, as generated by the model in JSON
      arguments: string;
    };
  }
  
  /**
   * @deprecated use AI SDK 3.1 CoreTool / ToolChoice instead
   *
   * Controls which (if any) function is called by the model.
   * - none means the model will not call a function and instead generates a message.
   * - auto means the model can pick between generating a message or calling a function.
   * - Specifying a particular function via {"type: "function", "function": {"name": "my_function"}} forces the model to call that function.
   * none is the default when no functions are present. auto is the default if functions are present.
   */
  export type ToolChoice =
    | 'none'
    | 'auto'
    | { type: 'function'; function: { name: string } };
  
  /**
   * @deprecated use AI SDK 3.1 CoreTool instead
   *
   * A list of tools the model may call. Currently, only functions are supported as a tool.
   * Use this to provide a list of functions the model may generate JSON inputs for.
   */
  export interface Tool {
    type: 'function';
    function: Function;
  }
  
  /**
   * @deprecated use AI SDK 3.1 CoreTool instead
   */
  export interface Function {
    /**
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
     * underscores and dashes, with a maximum length of 64.
     */
    name: string;
  
    /**
     * The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](/docs/guides/gpt/function-calling) for examples, and the
     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
     * documentation about the format.
     *
     * To describe a function that accepts no parameters, provide the value
     * `{"type": "object", "properties": {}}`.
     */
    parameters: Record<string, unknown>;
  
    /**
     * A description of what the function does, used by the model to choose when and
     * how to call the function.
     */
    description?: string;
  }

  /**
 * AI SDK UI Messages. They are used in the client and to communicate between the frontend and the API routes.
 */
export interface Message {
    id: string;
    createdAt?: Date;
  
    content: string;
  
    // @deprecated
    tool_call_id?: string;
  
    /**
  @deprecated Use AI SDK RSC instead: https://sdk.vercel.ai/docs/ai-sdk-rsc
   */
    ui?: string | JSX.Element | JSX.Element[] | null | undefined;
  
    /**
     * `function` and `tool` roles are deprecated.
     */
    role:
      | 'system'
      | 'user'
      | 'assistant'
      | 'function' // @deprecated
      | 'data'
      | 'tool'; // @deprecated
  
    /**
     *
     * If the message has a role of `function`, the `name` field is the name of the function.
     * Otherwise, the name field should not be set.
     */
    name?: string;
  
    /**
     * @deprecated Use AI SDK 3.1 `toolInvocations` instead.
     *
     * If the assistant role makes a function call, the `function_call` field
     * contains the function call name and arguments. Otherwise, the field should
     * not be set. (Deprecated and replaced by tool_calls.)
     */
    function_call?: string | FunctionCall;
  
    data?: JSONValue;
  
    /**
     * @deprecated Use AI SDK 3.1 `toolInvocations` instead.
     *
     * If the assistant role makes a tool call, the `tool_calls` field contains
     * the tool call name and arguments. Otherwise, the field should not be set.
     */
    tool_calls?: string | ToolCall[];
  
    /**
     * Additional message-specific information added on the server via StreamData
     */
    annotations?: JSONValue[] | undefined;
  
    /**
  Tool invocations (that can be tool calls or tool results, depending on whether or not the invocation has finished)
  that the assistant made as part of this message.
     */
    toolInvocations?: Array<ToolInvocation>;
  }

  export type JSONValue =
  | null
  | string
  | number
  | boolean
  | { [x: string]: JSONValue }
  | Array<JSONValue>;

  export type ToolInvocation =
  | CoreToolCall<string, any>
  | CoreToolResult<string, any, any>;

/**
Typed tool result that is returned by generateText and streamText. 
It contains the tool call ID, the tool name, the tool arguments, and the tool result.
 */
export interface CoreToolResult<NAME extends string, ARGS, RESULT> {
  /**
ID of the tool call. This ID is used to match the tool call with the tool result.
 */
  toolCallId: string;

  /**
Name of the tool that was called.
 */
  toolName: NAME;

  /**
Arguments of the tool call. This is a JSON-serializable object that matches the tool's input schema.
   */
  args: ARGS;

  /**
Result of the tool call. This is the result of the tool's execution.
   */
  result: RESULT;
}

/**
Typed tool call that is returned by generateText and streamText. 
It contains the tool call ID, the tool name, and the tool arguments. 
 */
export interface CoreToolCall<NAME extends string, ARGS> {
  /**
ID of the tool call. This ID is used to match the tool call with the tool result.
 */
  toolCallId: string;

  /**
Name of the tool that is being called.
 */
  toolName: NAME;

  /**
Arguments of the tool call. This is a JSON-serializable object that matches the tool's input schema.
   */
  args: ARGS;
}