<html>

<head>
  <script src="/unpkg.com/@steedos-builder/fiddle@0.0.5/dist/builder-fiddle.umd.js"></script>
  <script src="/unpkg.com/axios@0.26.1/dist/axios.min.js"></script>
</head>

<body>
  <builder-fiddle host="<%=builderHost%>"></builder-fiddle>
  <script>
    const settings = {
      rootUrl: "<%=rootUrl%>",
      userId: "<%=userId%>",
      tenantId: "<%=tenantId%>",
      authToken: "<%=authToken%>",
      pageId: "<%=pageId%>",
      messageOnly: true
    };

    debugger;
    let comp = document.querySelector("builder-fiddle");

    const loadPage = async () => {
      const { assetUrls, rootUrl, userId, tenantId, authToken, pageId } = settings;

      // 如果传入 steedos rooturl
      if (rootUrl && !authToken) return;

      const initialContent = {
        type: "page",
        title: "Welcome to Steedos",
        body: [],
        regions: ["body"],
        data: {
          initialValues: {},
          appId: "builder",
          title: "",
          context: {
            rootUrl,
            userId,
            tenantId,
            authToken,
          },
        },
      };

      if (pageId) {
        const result = await axios.get(
          `/api/builder6/table/designer/${pageId}/latest`,
          {
            withCredentials: true,
            headers: { Authorization: `Bearer ${tenantId},${authToken}` },
          }
        ).catch(function (error) {
          // handle error
          var errorMsg;
          if (error.response) {
            // 服务器响应了一个状态码，表示请求失败
            const errorData = error.response.data;
            console.log('Error message:', errorData.error);
            console.log('Error details:', errorData.detail);
            errorMsg = errorData.error;
          } else if (error.request) {
            // 请求已发出，但没有收到响应
            console.log('Error request:', error.request);
            errorMsg = error.request;
          } else {
            // 其他错误
            console.log('Error message:', error.message);
            errorMsg = error.message;
          }
          console.log('Error config:', error.config);
          alert(errorMsg);
        });
        if (result?.data) {
          let schema = result.data.amis_schema || initialContent;

          let pageType = result.data.type;
          if (typeof schema === "string") {
            schema = JSON.parse(schema);
          }

          if (!schema.data) {
            schema.data = {};
          }

          if (!schema.data.context) {
            schema.data.context = {};
          }


          schema.data.context.rootUrl = rootUrl;
          schema.data.context.tenantId = tenantId;
          schema.data.context.userId = userId;
          schema.data.context.authToken = authToken;
          schema.data.context.user = <%- JSON.stringify(userSession) %>;

          return schema || initialContent
        }
      } else {
        return initialContent
      }
    };

    const savePage = async (data) => {
      const { rootUrl, userId, tenantId, authToken, pageId } = settings;

      if (!pageId) {
        return;
      }

      // 保存schema时,清理context下的认证信息
      const schema = JSON.parse(
        JSON.stringify(data.data.AmisSchema, null, 4)
      );
      if (schema.data && typeof schema.data.context === 'object') {
        delete schema.data.context
      }

      return await axios.put(
        `/api/builder6/table/designer/${pageId}/save`,
        {
          withCredentials: true,
          schema: JSON.stringify(schema, null, 4), //直接存储json格式会导致react form异常。
        },
        {
          headers: { Authorization: `Bearer ${tenantId},${authToken}` },
        }
      ).catch(function (error) {
        // handle error
        var errorMsg;
        if (error.response) {
          // 服务器响应了一个状态码，表示请求失败
          const errorData = error.response.data;
          console.log('Error message:', errorData.error);
          console.log('Error details:', errorData.detail);
          errorMsg = errorData.error;
        } else if (error.request) {
          // 请求已发出，但没有收到响应
          console.log('Error request:', error.request);
          errorMsg = error.request;
        } else {
          // 其他错误
          console.log('Error message:', error.message);
          errorMsg = error.message;
        }
        console.log('Error config:', error.config);
        alert(errorMsg);
      });
    };

    const deployPageVersion = async () => {
      const { rootUrl, tenantId, authToken, pageId } = settings;

      if (!pageId) {
        return;
      }
      // return axios
      //   .post(
      //     `${rootUrl}/service/api/page/deploy`,
      //     {
      //       withCredentials: true,
      //       pageId: pageId,
      //     },
      //     {
      //       headers: { Authorization: `Bearer ${tenantId},${authToken}` },
      //     }
      //   )
      //   .then(function (response) {
      //     //保存时, 刷新父页面
      //     if (window.opener) {
      //       window.opener.postMessage(
      //         Object.assign(
      //           { type: "record.edited" },
      //           { objectName: "pages" },
      //           { record: {} }
      //         ),
      //         "*"
      //       );
      //     }
      //   })
      //   .catch(function (error) {
      //     // handle error
      //     console.log(error);
      //   });
    };
    window.addEventListener('message', function (event) {
      const { data } = event;
      if (data) {
        if (data.type === 'builder.loadContent') {
          loadPage().then((content) => {
            if (!content.regions) {
              //不设置regions的话，会显示工具栏和边栏
              Object.assign(content, { regions: ["body"] });
            }
            comp.messageFrame('builder.contentChanged', { AmisSchema: content })
          })
        }
        if (data.type === 'builder.saveContent') {
          savePage(data.data).then(() => {
            comp.messageFrame('builder.contentSaved')
          })
        }
        if (data.type === "builder.deployContent") {
          deployPageVersion().then(() => {
            comp.messageFrame('builder.contentDeployed')
          })
        }
      }
    })

    comp.settings = settings;
  </script>
</body>

</html>